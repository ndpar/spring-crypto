package com.ndpar.demo.crypto

import org.junit.Assert.assertEquals
import org.junit.Assert.assertTrue
import org.junit.Test
import org.junit.runner.RunWith
import org.springframework.beans.factory.annotation.Value
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit4.SpringRunner
import java.io.FileWriter
import java.io.StringReader
import java.security.PrivateKey
import java.security.cert.X509Certificate
import java.util.*
import javax.annotation.Resource

@SpringBootTest
@RunWith(SpringRunner::class)
class CryptoTest {

    @Value("\${com.ndpar.crypto.root.key}")
    private lateinit var keyPem: String

    @Value("\${com.ndpar.crypto.root.cert}")
    private lateinit var certPem: String

    @Resource
    private lateinit var rootKey: PrivateKey

    @Resource
    private lateinit var rootCert: X509Certificate

    @Test
    fun `generate key pair and sign cert`() {
        val dn = "CN=Intermediate CA"

        val keyPair = generateKeyPair()
        val cert = signKey(keyPair.public, rootKey, rootCert, dn)

        cert.verify(rootCert.publicKey)
        cert.checkValidity(Date() + 3600.days)

        assertTrue(157 < cert.serialNumber.bitLength())
        assertEquals("SHA256WITHECDSA", cert.sigAlgName)
        assertTrue(cert.issuerDN.name.contains("Root CA"))
        assertEquals(dn, cert.subjectDN.name)
        assertEquals(KEY_ALGORITHM, cert.publicKey.algorithm)
        assertEquals(2, cert.nonCriticalExtensionOIDs.size)
        assertEquals(2, cert.criticalExtensionOIDs.size)
        assertTrue(cert.criticalExtensionOIDs.contains("2.5.29.15")) // key usage

        // check PEM serialization
        readAndWritePrivateKeyPem(keyPair.private.toPem().toString())
        readAndWriteCertPem(cert.toPem().toString())

        // print PEM files just in case
        keyPair.private.toPem(FileWriter("target/test-key.pem"))
        cert.toPem(FileWriter("target/test-cert.pem"))
    }

    @Test
    fun `read and write cert PEM generated by openssl`() {
        readAndWriteCertPem(certPem)
    }

    private fun readAndWriteCertPem(pem: String) {
        val result = StringReader(pem).readCert().toPem().toString()
        assertEquals(pem, result)
    }

    @Test
    fun `read and write private key PEM generated by openssl`() {
        readAndWritePrivateKeyPem(keyPem)
    }

    private fun readAndWritePrivateKeyPem(pem: String) {
        val result = StringReader(pem).readPrivateKey().toPem().toString()
        assertEquals(pem, result)
    }
}